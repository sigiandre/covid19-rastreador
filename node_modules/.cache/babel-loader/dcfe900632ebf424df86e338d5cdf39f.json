{"ast":null,"code":"var _jsxFileName = \"/Users/andrediaz/Desktop/Disco D/covid19-rastreador/src/componentes/Graficos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graficos = ({\n  data,\n  pais\n}) => {\n  _s();\n\n  const [datosDiarios, setDatosDiarios] = useState({});\n  useEffect(() => {\n    const cargarDatos = async () => {\n      const data = await cargarDatosDiarios();\n      setDatosDiarios(data);\n    };\n\n    cargarDatos();\n  });\n\n  const cargarDatosDiarios = async () => {\n    try {\n      const data = await axios.get(\"https://covid19.mathdro.id/api/daily\");\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  let chart;\n\n  if (datosDiarios.data && (pais === \"World\" || pais === \"\")) {\n    chart = /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        labels: datosDiarios.data.map(e => e.reportDate),\n        datasets: [{\n          data: datosDiarios.data.map(e => e.confirmed.total),\n          label: 'Infectados',\n          borderColor: 'red',\n          fill: true\n        }, {\n          data: datosDiarios.data.map(e => e.deaths.total),\n          label: 'Muertos',\n          borderColor: 'black',\n          fill: true\n        }]\n      },\n      options: {\n        legend: {\n          labels: {\n            fontColor: 'black',\n            fontSize: 18\n          }\n        },\n        title: {\n          display: true,\n          text: 'Coronavirus en el Mundo',\n          fontColor: 'black'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  } else if (data.data) {\n    chart = /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: {\n        labels: ['Infectados', 'Recuperados', 'Muertos'],\n        datasets: [{\n          label: 'Gente',\n          backgroundColor: ['cornflowerblue', 'grey', 'red'],\n          data: [data.data.confirmed.value, data.data.recovered.value, data.data.deaths.value]\n        }]\n      },\n      options: {\n        legend: {\n          display: true,\n          fontColor: 'white'\n        },\n        title: {\n          display: true,\n          text: `Coronavirus en ${pais}`,\n          fontColor: 'black'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (!data.data) {\n    return \"cargando...\";\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Graficos, \"Gyni5MJB1MRbxigeN8az+Q2q8Ec=\");\n\n_c = Graficos;\nexport default Graficos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graficos\");","map":{"version":3,"sources":["/Users/andrediaz/Desktop/Disco D/covid19-rastreador/src/componentes/Graficos.js"],"names":["React","useState","useEffect","axios","Line","Doughnut","Graficos","data","pais","datosDiarios","setDatosDiarios","cargarDatos","cargarDatosDiarios","get","err","console","log","chart","labels","map","e","reportDate","datasets","confirmed","total","label","borderColor","fill","deaths","legend","fontColor","fontSize","title","display","text","backgroundColor","value","recovered"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line, Doughnut } from 'react-chartjs-2';\n\nconst Graficos = ({ data, pais }) => {\n    \n    const[datosDiarios, setDatosDiarios] = useState({});\n\n    useEffect(() => {\n        const cargarDatos = async () => {\n            const data = await cargarDatosDiarios();\n            setDatosDiarios(data);\n        }\n        cargarDatos();\n    })\n\n    const cargarDatosDiarios = async () => {\n        try{\n            const data = await axios.get(\"https://covid19.mathdro.id/api/daily\");\n            return data;\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n\n    let chart;\n\n    if(datosDiarios.data && (pais === \"World\" || pais === \"\")){\n        chart = (\n            <Line \n                data={{\n                    labels: datosDiarios.data.map(e => e.reportDate),\n                    datasets: [{\n                        data: datosDiarios.data.map(e => e.confirmed.total),\n                        label: 'Infectados',\n                        borderColor: 'red',\n                        fill: true\n                    },{\n                        data: datosDiarios.data.map(e => e.deaths.total),\n                        label: 'Muertos',\n                        borderColor: 'black',\n                        fill: true\n                    }]\n                }}\n                options={{\n                    legend:{\n                        labels:{\n                            fontColor: 'black',\n                            fontSize: 18\n                        }\n                    },\n                    title:{\n                        display: true,\n                        text: 'Coronavirus en el Mundo',\n                        fontColor: 'black'\n                    }\n                }}\n            />\n        )\n    }\n    else if(data.data){\n        chart = (\n            <Doughnut\n                data={{\n                    labels: ['Infectados', 'Recuperados', 'Muertos'],\n                    datasets: [{\n                        label: 'Gente',\n                        backgroundColor: [\n                            'cornflowerblue',\n                            'grey',\n                            'red'\n                        ],\n                        data:[data.data.confirmed.value, data.data.recovered.value, data.data.deaths.value]\n                    }]\n                }}\n                options={{\n                    legend:{\n                        display: true,\n                        fontColor: 'white'\n                    },\n                    title:{\n                        display: true,\n                        text: `Coronavirus en ${pais}`,\n                        fontColor: 'black'\n                    }\n                }}\n            />\n        )\n    }\n\n    if(!data.data){\n        return \"cargando...\"\n    }\n    else{\n        return(\n            <div>\n                {chart}\n            </div>\n        )\n    }\n}\n\nexport default Graficos;"]},"metadata":{},"sourceType":"module"}